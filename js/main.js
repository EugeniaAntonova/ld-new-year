const slider = document.querySelector("#slider"), slides = [...slider.children], controls = document.querySelectorAll(".container-controls"), prevBtn = document.querySelector(".container-controls.left"), nextBtn = document.querySelector(".container-controls.right"); let sectionWidth = slider.querySelector(".section").offsetWidth, slidesPerView = Math.round(slider.offsetWidth / sectionWidth); window.addEventListener("resize", () => { sectionWidth = slider.querySelector(".section").offsetWidth, slidesPerView = Math.round(slider.offsetWidth / sectionWidth) }), slides.slice(-slidesPerView).reverse().forEach(e => { slider.insertAdjacentHTML("afterbegin", e.outerHTML) }), slides.slice(0, slidesPerView).forEach(e => { slider.insertAdjacentHTML("beforeend", e.outerHTML) }), controls.forEach(e => { e.addEventListener("click", () => { slider.scrollLeft += "left" === e.id ? -sectionWidth : sectionWidth }) }); const infiniteScroll = () => { 0 === slider.scrollLeft ? (slider.classList.add("no-transition"), slider.scrollLeft = slider.scrollWidth - 2 * slider.offsetWidth, slider.classList.remove("no-transition")) : Math.ceil(slider.scrollLeft) === slider.scrollWidth - slider.offsetWidth && (slider.classList.add("no-transition"), slider.scrollLeft = slider.offsetWidth, slider.classList.remove("no-transition")) }; slider.addEventListener("scroll", infiniteScroll); const header = document.querySelector("header.inner-header"), callback = e => { e.forEach(e => { if (e.isIntersecting) { let r = e.target.dataset.sectionName; e.target.style.scrollBehavior = "auto", e.target.scrollTop = -e.target.scrollHeight, e.target.style.scrollBehavior = "smooth"; header.querySelector(".header-current-title").textContent = r } e.target.style.scrollBehavior = "auto", e.target.scrollTop = -e.target.scrollHeight, e.target.style.scrollBehavior = "smooth" }) }, observer = new IntersectionObserver(callback, { threshold: .1 }); slides.forEach(e => { observer.observe(e) }), slides.forEach(e => { e.addEventListener("scroll", () => { e.querySelector(".marker").getBoundingClientRect().top < 50 ? header.classList.add("bkg-col") : header.classList.remove("bkg-col") }) }); const mainPage = document.querySelector(".main-page"), mainPageLink = mainPage.querySelector(".main-page-link"), mainPageLinkClick = e => { e.preventDefault(); let r = e.target.dataset.section; slider.classList.add("no-transition"), slider.querySelector(`#${r}`).scrollIntoView(), mainPage.classList.remove("open"), slider.classList.remove("no-transition") }; mainPageLink.addEventListener("click", mainPageLinkClick); "use strict"; const burgers = Array.from(document.querySelectorAll("button.burger")), burgerMenu = document.querySelector("section.burger-menu"), burgerMainPageLink = document.querySelector(".burger-main-page-link"), burgerLinks = document.querySelectorAll(".burger-link"), onBurgerClick = e => { burgers.forEach(e => { if (e.classList.toggle("closed"), !e.classList.contains("closed")) { burgerMenu.classList.add("open"); return } burgerMenu.classList.remove("open") }) }, switchOffBurgers = () => { burgers.forEach(e => { e.classList.add("closed") }) }, onBurgerLinkClick = e => { if (e.preventDefault(), e.target.classList.contains("burger-main-page-link")) return; let r = e.target.dataset.section; slider.classList.add("no-transition"), slider.querySelector(`#${r}`).scrollIntoView(), burgerMenu.classList.remove("open"), mainPage.classList.remove("open"), switchOffBurgers(), slider.classList.remove("no-transition") }, onMainLinkClick = e => { e.preventDefault(), mainPage.classList.add("open"), document.body.classList.add("light"), burgerMenu.classList.remove("open"), switchOffBurgers() }; burgers.forEach(e => { e.addEventListener("click", onBurgerClick) }), burgerMainPageLink.addEventListener("click", onMainLinkClick), burgerLinks.forEach(e => { e.addEventListener("click", onBurgerLinkClick) }); "use strict"; const currentPlayerContainer = document.querySelector("#current-player-wrapper"), currentPlayerAction = document.querySelector(".current-player-action"), currentPlayerScore = document.querySelector(".current-player-score"), currentPlayerPlace = document.querySelector(".current-player-place"), playersList = document.querySelector(".rating-list"), playerTemplate = document.querySelector("#player-template").content, winnersList = document.querySelector(".winners-list"), animateValue = (e, r, t) => { let l = null, s = o => { l || (l = o); let n = Math.min((o - l) / t, 1); e.textContent = `${Math.floor(n * r).toLocaleString().replaceAll(",", " ")}`, n < 1 && window.requestAnimationFrame(s) }; window.requestAnimationFrame(s) }, scoreOperations = e => { console.log(.02 * e); let r = 3225e3 + .02 * e; animateValue(document.querySelector(".js-prize-value"), r, 1e3); let t = [...document.querySelectorAll(".js-prizes-prize")]; for (let l = 0; l < t.length; l++)switch (l) { case 0: t[l].textContent = `${Math.floor(1e6 + .002 * e).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 1: t[l].textContent = `${Math.floor(6e5 + .0015 * e).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 2: t[l].textContent = `${Math.floor(35e4 + .0015 * e).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 3: t[l].textContent = `${Math.floor(2e5 + .0015 * e).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 4: t[l].textContent = `${Math.floor(15e4 + .0015 * e).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 5: t[l].textContent = `${Math.floor(75e3 + .001 * e / 2).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 6: t[l].textContent = `${Math.floor(5e4 + .001 * e / 3).toLocaleString().replaceAll(",", " ")} \u20B8`; break; case 7: t[l].textContent = `${Math.floor(25e3 + .005 * e / 15).toLocaleString().replaceAll(",", " ")} `; break; case 8: t[l].textContent = `${Math.floor(1e4 + .005 * e / 25).toLocaleString().replaceAll(",", " ")}` } }, createPlayer = e => { let { nick: r, place: t, score: l, bgUserToken: s } = e, o = playerTemplate.cloneNode(!0); if (o.querySelector(".nick").textContent = r, o.querySelector(".place").textContent = t, o.querySelector(".score").textContent = Math.floor(l / 100).toLocaleString().replaceAll(",", " "), 10 >= parseInt(t)) { let n = document.createElement("img"); n.src = `https://sz.kz/picture?bgAvatar=${s}`, o.querySelector(".winner-avatar").append(n) } return o }, createAnchor = e => { if (e) { let r = playersList.children; r[e.place - 1].id = "current-in-the-list", r[e.place - 1].classList.add("current-player"); let t = document.querySelector("#current-in-the-list"); e.place <= 100 && e.place > 5 && (currentPlayerAction.classList.add("ready"), currentPlayerAction.addEventListener("click", () => { t.scrollIntoView({ block: "center" }) })) } else currentPlayerContainer.style.display = "none" }, onSuccessPlayers = (e, r, t) => { e.forEach(e => { let r = t(e); playersList.appendChild(r) }), r && (currentPlayerPlace.textContent = r.place, currentPlayerScore.textContent = Math.floor(r.score / 100).toLocaleString().replaceAll(",", " ")), createAnchor(r) }, onFail = e => { console.log(e) }, getData = async (e, r, t, l) => { try { let s = await fetch("https://sz.kz/srvNew?srv=lrRating&lotteryRace=52&offset=101"); if (!s.ok) throw Error("Не удалось получить данные"); let o = await s.json(), n = o.data, a = !!o.currentUser && o.currentUser, i = o.allScore ? o.allScore : 0; console.log(.02 * i), l(i), e(n, a, t) } catch (c) { r(c.message) } }; document.addEventListener("DOMContentLoaded", () => { getData(onSuccessPlayers, onFail, createPlayer, scoreOperations) }); const accordeon = document.querySelector(".faq-list"), closePanel = e => { let r = e.querySelector(".panel"); e.classList.remove("opened"), r.style.maxHeight = "0" }, openPanel = e => { let r = e.querySelector(".panel"); e.classList.add("opened"), r.style.maxHeight = `${r.scrollHeight + 60}px` }, onAccordeonClick = e => { let r = e.target, t = accordeon.querySelector(".opened"); if (!r.classList.contains("js-toggle")) return; t && closePanel(t); let l = r.closest("div"); l != t && (openPanel(l), t = l) }; accordeon.addEventListener("click", onAccordeonClick); const animatables = [...document.querySelectorAll(".js-show")], options = { rootMargin: "0px", threshold: .3 }; function showAnimatable(e) { e.forEach(e => { e.isIntersecting ? e.target.classList.replace("invisible", "visible") : e.target.classList.replace("visible", "invisible") }) } let imgObserver = new IntersectionObserver(showAnimatable, options); animatables.forEach(e => { imgObserver.observe(e) });